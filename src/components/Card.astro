---
interface Props {
  title: string;
  description: string;
  image: string;
  slug: string;
}

const { title, description, image, slug } = Astro.props;
---

<div class="flex-col p-4">
  <img
    transition:name={"image-" + slug}
    class="card-image aspect-[144/77] w-full border object-cover grayscale transition-all md:group-hover:border-black md:group-hover:grayscale-0"
    src={image}
    alt={title}
  />

  <div class="py-4">
    <p
      transition:name={"title-" + slug}
      class="font-ar-one text-xl font-bold transition-all"
    >
      {title}
    </p>
    <p
      transition:name={"description-" + slug}
      class="text-md font-roboto-mono transition-all"
    >
      {description}
    </p>
  </div>
</div>

<style is:global>
  .shadow-transition {
    -webkit-transition:
      -webkit-transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      -webkit-box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7);
    transition:
      -webkit-transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      -webkit-box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7);
    -o-transition:
      transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7);
    transition:
      transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7);
    transition:
      transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      -webkit-transform 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7),
      -webkit-box-shadow 0.3s cubic-bezier(0.5, 2.5, 0.7, 0.7);
    transition-delay: 0s;
  }
</style>

<!-- <script>
  const cards = document.querySelectorAll(".porto-card");

  const observer = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const children = entry.target.children;

          Array.from(children).forEach((child) => {
            if (child.classList.contains("horizontal")) {
              child.classList.add("w-full");
            } else if (child.classList.contains("vertical")) {
              child.classList.add("h-full");
            }
          });

          // observer.unobserve(entry.target);
        }
      });
    },
    {
      threshold: 1,
    },
  );

  cards.forEach((card) => {
    observer.observe(card);
  });
</script> -->
